nadavg, ddanon
Nadav Geva (206338865), Daniel Danon (313364861)
Ex: 1

FILES:
osm.c -- The implementation of question 3
makefile -- The make file for the library

REMARKS:
In task 3 we considered some options on how to handle returning error code in case the 
time-getting function fails.
We eventually did it as a MACRO to avoid code repetition, even though we know we could've just "copy-pasted" the
code on each function. In our opinion this seemed less elegant, so we picked the MACRO.

ANSWERS:

=================
Task 1
=================

mkdir("os", 0775) -> 0 (success)
	First, it creates a directory in the current folder called "os", with 0755 permissions.
	(Owner can read, execute and write, everyone else can and only read and execute).
mkdir("os/2015", 0755) -> 0 (success)
	Then, it creates a subfolder in "os" called "2015" with 0755 permissions (same as above).
open("os/2015/info", O_WRONLY|O_CREAT|O_TRUNC, 0666) -> 3
	Tries to open the file os/2015/info with write only permissions, if it doesn't exist
	it creates it, and truncates it if it does exist ("w"),
	everyone is allowed to read and write to the file.
	lastly receiving its file descriptor from the OS (3).
write(3, "                  " ... "{USERNAME}\n{ARGS}", 122) = 122
	We write to the file a lot of spaces (110), then the name
	of the current logged in user, a newline, and then the parameter given to the program.
	The first paramter is the file descriptor, and the third is the string length.
	It returns 122 (number of chars written). 
close(3) -> 0
	We close the file, described by its descriptor (3),
	and it succeeds (returns 0).
unlink("os/2015/info") -> 0
	It then unlink the file (and succeeds).
rmdir("os/2015/") -> 0
rmdir("os/") -> 0
	And then the other directories that were created (success)
exit_group(0)
	and then calls exits with status 0 (success).

=================
Task 2
=================
1. 
	(i)
	On applications depending on very accurate time-specific events (real-time systems), interrupts
	that occur during this situations cause the program instructions to be postponed, and thus 
	might create unwanted results. If we sample a very quickly changing signal at a given frequency,
	even few nanoseconds of delay might change the results significantly missing changes in the signal
	(ii)
	Supposing a process works on a certain file, then an interrupt is called and tries to edit the
	file as well we might run into unexpected behaviour where when we return to the first process
	the file is different from its version before the interrupt
2.
	It might solve some problem, but it might cause much more.
	Interrupts are there because some events are urgent and need to be handled immediately.
	If such a solution is chosen, it must be applied on a very specific, critical and
	low time-consuming instructions sets, and only as a last resort.
	Since exceptions are also handled using interrupts, blocking interrupts might also
	lead to blockage of runtime critical exceptions!
