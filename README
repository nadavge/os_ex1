nadavg, ddanon
206338865, 313364861

FILES:
osm.c -- The implementation of question 3

REMARKS:
In task 3 we considered some options on how to handle returning error code in case the 
time-getting function fails.
We eventualy did it as a MACRO to avoid code repetition, even though we know we could've just "copy-pasted" the
code on each function. In our opinion this seemed less elegant, so we picked the MACRO.

ANSWERS:

=================
Task 1
=================
First, it creates a directory in the same folder called "os", with 0755 permissions.
Then, it creates a subfolder in "os" called "2015".
Then, it opens a handler to a file "info" with permissions to write only,
if it doesn't exist it creates it, and truncates it if it does exist ("w"),
lastly receiving its file descriptor from the OS.
It then calls fstat with the given file descriptor, as a regular file with 0644 permissions. it's empty.
We allocate 2^16 bytes of memory. We write to the file a lot of spaces (110), then the username
	of the current logged in user, and then the parameter given to the program.
It then de-allocates the memory allocated, and deletes the file and all directories created.
(os/2015/info, os/2015/, os/),
and then calls exit with status 0 (success).

=================
Task 2
=================
1. 
	(i)
	On applications depending on very accurate time-specific events (real-time systems), interrupts
	that occur during this situations cause the program instructions to be postponed, and thus 
	might create unwanted results. If we sample a very quickly changing signal at a given frequency,
	even few nanoseconds of delay might change the results significantly missing changes in the signal
	(ii)
	Supposing a process works on a certain file, then an interrupt is called and tries to edit the
	file aswell we might run into unexpected behaviour where when we return to the first process
	the file is different from its version before the interrupt
2.
	It might solve some problem, but it might cause much more.
	Interrupts are there because some events are urgent and need to be handled immediately.
	If such a solution is chosen, it must be applied on a very specific, critical and
	low time-consuming instructions sets, and only as a last resort.
	Since exceptions are also handled using interrupts, blocking interrupts might also
	lead to blockage of runtime critical exceptions!
